(* https://www.ece.ualberta.ca/~elliott/ee552/studentAppNotes/2003_w/misc/bmp_file_format/bmp_file_format.htm *)
DEFINE
    bmp_get_bmp_header == 0 at ;
    bmp_get_dib_header == 1 at ;
    bmp_get_color_table == 2 at ;
    bmp_get_pixels == 3 at ;
    
    bmp_get_format_version == bmp_get_bmp_header 0 at ["BM" "BA" "CI" "CP" "IC" "PT"] swap indexof ;
    bmp_get_pixels_offset == bmp_get_bmp_header 2 at ;
    bmp_get_dib_size == bmp_get_dib_header 0 at ;
    bmp_get_width == bmp_get_dib_header 1 at ;
    bmp_get_height == bmp_get_dib_header 2 at ;
    bmp_get_bits_per_pixel == bmp_get_dib_header 4 at ;
    bmp_get_compression_format == bmp_get_dib_header 5 at ;
    bmp_get_color_table_entry_count == bmp_get_dib_header 9 at ;

    bmp_validate == [rollup i has] [] [1 quit] ifte pop2 ;

    (* bmp_read_file_header : FileStream [] -> FileStream [BmpFileHeader] *)
    bmp_read_file_header ==
        swap 0 0 fseek pop []
        [
            [ 2 read_chars ] (* Signature *)
            [ read_int ] (* File Size *)
            [ 4 1 fseek pop read_int ] (* Data Offset *)
        ]
        [ dip cons ]
        step arrrev rolldown cons
        ;

    (* bmp_read_dib_header : FileStream [BmpFileHeader] -> FileStream [BmpFileHeader BmpDibHeader] *)
    bmp_read_dib_header ==
        swap 14 0 fseek pop []
        [
            [ read_int ] (* Info Header Size *)
            [ read_int ] (* Width *)
            [ read_int ] (* Height *)
            [ read_short ] (* Planes *)
            [ read_short ] (* Bits per Pixel *)
            [ read_int ] (* Compression *)
            [ read_int ] (* Image Size *)
            [ read_int ] (* X Pixels per Meter *)
            [ read_int ] (* Y Pixels per Meter *)
            [ read_int ] (* Colors Used *)
            [ read_int ] (* Important Colors *)
        ]
        [ dip cons ]
        step arrrev rolldown cons arrrev
        ;

    (* bmp_read_color_table : FileStream [BmpFileHeader BmpDibHeader] -> FileStream [BmpFileHeader BmpDibHeader BmpColorTable] *)
    bmp_read_color_table ==
        dup [bmp_get_dib_size 14 + 0 fseek pop] dip
        dup bmp_get_color_table_entry_count swapd [] swap [ [read_int] dip cons ] times arrrev
        rolldown arrrev cons arrrev
        ;

    bmp_seek_pixels == dup swapd bmp_get_pixels_offset 0 fseek pop swap ;

    (* [Bmp..] File Width Reader [Row..] -> [Bmp..] File Width Reader [Row..] *)
    bmp_pad_pixel_row == [[dup 4 rem swapd 1 fseek pop swap] dip] dip ;

    (* [Bmp..] File Width Reader -> [Bmp..] File Width Reader [Row..] *)
    bmp_read_pixel_row ==
        [dup put [ftell put '\n putch] dip] dip
        [dup swapd] dip [] rolldown                                     (* [Bmp].. Width File Reader [] Width *)
        [[dup [i] dip] dip swapd cons] times                            (* [Bmp].. Width File Reader [Row..] *)
        [swapd] dip bmp_pad_pixel_row                                   (* [Bmp].. File Width Reader [Row..] *)
        ;

    bmp_get_pixel_reader == dup bmp_get_bits_per_pixel [
        [8 [read_byte]]
        [16 [read_short]]
        [24 [dup 3 fread 3 pack_le]]
        [32 [read_int]]
    ] case ;

    bmp_get_image_size == dup dup [[bmp_get_bits_per_pixel] dip bmp_get_width] dip bmp_get_height * * 7 + 8 / ;

    bmp_read_pixels ==                                                  (* File [Bmp..] *)
        bmp_seek_pixels                                                 (* File [Bmp..] *)
        dup bmp_get_image_size swapd pstack fread pstack
        bmp_get_pixel_reader                                            (* File [Bmp..] Reader *)
        [dup swapd dup [bmp_get_width] dip bmp_get_height abs] dip      (* [Bmp..] File Width Height Reader *)
        [] rolldown [[bmp_read_pixel_row] dip cons] times               (* [Bmp..] File Width Reader [Rows..] *)
        popd popd rolldown arrrev cons arrrev                           (* File [Rows..] [Bmp..] *)
        bmp_maybe_flip                                                  (* File [Rows..] [Bmp..] *)
        ;

    bmp_indexes_to_pixels == uncons uncons uncons uncons pop [[dupd at] map] map [] cons cons cons cons ;

    bmp_maybe_flip ==
        [bmp_get_height 0 <]
        [uncons uncons uncons uncons pop arrrev [] cons cons cons cons]
        []
        ifte
        ;

    read_bmp == []
        bmp_read_file_header
        bmp_read_dib_header
        bmp_read_color_table
        bmp_read_pixels
        ;

    (* parse_bmp P -> [[I ..] ..] *)
    parse_bmp ==
        read_bmp
        [bmp_get_color_table_entry_count 0 =] [] [bmp_indexes_to_pixels] ifte
        bmp_get_pixels
        ;
.
