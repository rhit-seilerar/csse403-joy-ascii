0 setecho .
1 setundeferror .
2 setautoput .

"joy/inilib.joy" include .
"seqlib" libload .

DEFINE put_nice == put '\n putch.

(* Syntax, Arithmetic *)


(* my_factorial : N -> M *)
DEFINE my_factorial == TODO.


(* my_fibonnacci : N -> F *)
DEFINE my_fibonacci == TODO.


(* my_reverse : L1 -> L2 *)
DEFINE my_reverse == TODO.


(* Takes a string and a list of cases [string program..]. If the input matches a case, runs the program with the string as input. The first case is default and is run if no other cases match. *)
(* strcase: S [[P0] [S1 P1] [S2 P2] ..] -> S P i*)
DEFINE strcase == uncons swapd [first =] filter [null] [pop swons] [popd popd first] ifte i.

"a" [[1] ["a" 2] ["b" 3]] strcase put put_nice.
"b" [[1] ["a" 2] ["b" 3]] strcase put put_nice.
"c" [[1] ["a" 2] ["b" 3]] strcase put put_nice.


(*
 * Value at index (reimplementation of Joy 'at' function)
 * val_at: AGG I -> N
 *)
DEFINE val_at == [rest] times first.




DEFINE
    TODO == [TODO] unstack ;

    assert == [[dup] dip] dip infra dup swapd equal
        ["Passed\n" putchars pop2]
        ["Expected " putchars swap put "; Got " putchars put '\n putch]
        branch ;

    test == "Testing " putchars dup2 put "with input " putchars put ": " putchars
        assert ;
.

[1] [0] [my_factorial] test.
[1] [1] [my_factorial] test.
[6] [3] [my_factorial] test.

[0] [0] [my_fibonacci] test.
[1] [1] [my_fibonacci] test.
[8] [6] [my_fibonacci] test.

[[]] [[]] [my_reverse] test.
[[1]] [[1]] [my_reverse] test.
[[3 2 1]] [[1 2 3]] [my_reverse] test.

["abc" "abc"] [[[dup]] "abc"] [strcase] test.
["abc"] [[[dup] ["abc"]] "abc"] [strcase] test.
[3 "def"] [[[dup] ["def" 3] ["abc"]] "def"] [strcase] test.

[3] [2 [1 2 3]] [val_at] test.
