0 setecho .
1 setundeferror .
2 setautoput .

"joy/inilib.joy" include .
"seqlib" libload .

DEFINE put_nice == put '\n putch.

(* Syntax, Arithmetic *)


(* factorial : N -> M *)
DEFINE factorial == [1] [*] primrec.


(* fibonnacci : N -> F *)
DEFINE fibonacci == TODO.


(* reverse : L1 -> L2 *)
DEFINE reverse == TODO.


(* indexof : AGG N -> I *)
DEFINE indexof ==
    -1 rotate -1 rollup
    [dup null not]
    [
        [1 +] dip2 uncons [dupd =] dip swap
        [[swapd] dip pop ""] [] branch
    ]
    while pop pop pop .

(*
 * Value at index (reimplementation of Joy 'at' function)
 * val_at: AGG I -> N
 *)
DEFINE val_at == [rest] times first.




DEFINE
    TODO == [TODO] unstack ;

    assert == [[dup] dip] dip infra dup swapd equal
        ["Passed\n" putchars pop2]
        ["Expected " putchars swap put "; Got " putchars put '\n putch]
        branch ;

    test == "Testing " putchars dup2 put "with input " putchars put ": " putchars
        assert ;
.

[1] [0] [my_factorial] test.
[1] [1] [my_factorial] test.
[6] [3] [my_factorial] test.

[0] [0] [fibonacci_v3] test.
[1] [1] [fibonacci_v3] test.
[8] [6] [fibonacci_v3] test.

[[]] [[]] [reverse_v3] test.
[[1]] [[1]] [reverse_v3] test.
[[3 2 1]] [[1 2 3]] [reverse_v3] test.

[1] [2 [1 2 3]] [indexof] test.
[3] [2 [1 2 3]] [val_at] test.
