LIBRA
    dupdd == [dupd] dip ;
    dup2 == dupd dup swapd ;
    pop2 == pop pop ;
    popd2 == [pop pop] dip ;
    dip2 == swap [dip] dip ;
    pstack == stack put '\n putch ;

    (* indexof: Agg Elem -> Index *)
    indexof == swap dup size rollup
        [[null] [true] [first equal] ifte] [pop2 0]
        [rest] [succ] linrec
        dup swapd = -1 rolldown choice ;

    arrrev == [] [swons] swapd step ;
    strrev == "" [swons] swapd step ;

    (* Takes a string and a list of cases [string program..]. If the input matches a case, runs the program with the string as input. The first case has no string and is default. *)
    (* strcase: S [..[S P]..] -> S P i *)
    strcase == uncons swapd [first =] filter [null] [pop swons] [popd popd first] ifte i;

    (* strsplit: Agg Elem -> Agg1 Agg2 *)
    (* Each time Elem is encountered, swap the accumuator. *)
    strsplit ==
        "" rotate dup
        [null not]
        [
            pop uncons [dup2 =] dip swap
            [popd ""]
            [[swap swonsd] dip dup]
            branch
        ]
        while pop popd swap strrev ;

    (* pack_rgba [R G B A] -> I *)
    (* Pops [R G B A] (ints from 0-255) off the stack, outputs a packed int *)
    pack_one == unswonsd 256 * + ;
    pack_argb == 0 4 [pack_one] times popd ;
    pack_rgb == [[0 =] all] [0] [255] ifte swons pack_argb ;

    (* unpack_rgba I -> [A R G B] *)
    (* Pops a packed int from the stack, outputs [A R G B] *)
    unpack_one == dup 256 rem [0 <] [256 +] [] ifte dup [- 256 /] dip swap swonsd ;
    unpack_argb == [] swap 4 [unpack_one] times pop ;
    
    pack_le == [arrrev 0] dip [pack_one] times popd ;
    pack_le2 == 2 pack_le ;
    pack_le4 == 4 pack_le ;

    (* read_chars : S I -> S "abc.." *)
    read_chars == dupd fread "" swap [chr swons] step strrev ;
    (* read_byte : S -> S I *)
    read_byte == dup 1 fread first ;
    (* read_short : S -> S I *)
    read_short == dup 2 fread pack_le2 ;
    (* read_int : S -> S I *)
    read_int == dup 4 fread pack_le4 ;
    (* read_sint : S -> S I *)
    read_sint == read_int [2147483648 <] [] [4294967296 -] ifte ;

    fset == 0 fseek pop ;
    
    (* replace : [A0 A1 .. AI .. AN-1] X I -> [A0 A1 .. X .. AN-1] *)
    replace == dup [[unconsd] times unswonsd popd swons ] dip [cons] times ;
    
    (* append : [A0 A1 .. AN-1] X -> [A0 A1 .. AN-1 X] *)
    append == [[] swap [swons] step] dip swons [] swap [swons] step ;
    
    (* [A0 A1 .. AI .. AN-1] I [P] -> [A0 A1 .. (AI [P] i) .. AN-1] *)
    myapply == [dup2] dip rollup [[[at] dip i] dip] dip swapd replace ;
    
    (* Struct SI MI *)
    member_get == [dupd at] dip at ;
    
    (* Struct X SI MI *)
    member_replace == [swap [dup2 at] dip] dip replace swap replace ;
    
    (* Struct X SI *)
    member_append == swap [[at] nullary] dip append swap replace ;
    
    (* Struct SI MI [P] *)
    member_apply == [[member_get] nullary] dip unary rollup member_replace ;
.
