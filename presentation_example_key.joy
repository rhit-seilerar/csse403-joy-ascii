0 setecho .
1 setundeferror .
2 setautoput .

"joy/inilib.joy" include .
"seqlib" libload .

DEFINE put_nice == put '\n putch.


(* Syntax, Arithmetic *)
1 2 - put_nice.
4 5 + 2 div put put_nice.

(* i executes the previous quoted code: *)
[1 2 +] i put_nice.

(* feel free to mess with more arithmetic here! *)


(* factorial : N -> M *)
DEFINE my_factorial == [1] [*] primrec.

5 my_factorial put_nice.


(* fibonnacci : N -> F *)
DEFINE 
fibonacci_v1 == [1 <=] [[1] unary] [1 - dup 1 -] [+] binrec;
fibonacci_v2 == [1 <=] [[1] unary] [pred dup pred] [+] binrec;
fibonacci_v3 == [2 <] [] [pred dup pred] [+] binrec.

[0 1 2 3 4 5 6 7 8] [fibonacci_v1] map put_nice.
[0 1 2 3 4 5 6 7 8] [fibonacci_v2] map put_nice.


(* reverse : L1 -> L2 *)
DEFINE
reverse_v1 == [] [swap null not] [[unswons] dip cons] while swap pop;
reverse_v2 == [] [swap null not] [unswonsd cons] while swap pop;
reverse_v3 == [] [swons] fold.

[1 2 3 4 5] reverse_v1 put_nice.
[1 2 3 4 5] reverse_v2 put_nice.
[1 2 3 4 5] reverse_v3 put_nice.


(* Takes a string and a list of cases [string program..]. If the input matches a case, runs the program with the string as input. The first case is default and is run if no other cases match. *)
(* strcase: S [[P0] [S1 P1] [S2 P2] ..] -> S P i*)
DEFINE strcase == uncons swapd [first =] filter [null] [pop swons] [popd popd first] ifte i.

"a" [[1] ["a" 2] ["b" 3]] strcase put put_nice.
"b" [[1] ["a" 2] ["b" 3]] strcase put put_nice.
"c" [[1] ["a" 2] ["b" 3]] strcase put put_nice.


(*
 * Value at index (reimplementation of Joy 'at' function)
 * val_at: AGG I -> N
 *)
DEFINE val_at == [rest] times first.

[8 29 3 4 5] 1 val_at put_nice.




DEFINE
    TODO == [TODO] unstack ;

    assert == [[dup] dip] dip infra dup swapd equal
        ["Passed\n" putchars pop2]
        ["Expected " putchars swap put "; Got " putchars put '\n putch]
        branch ;

    test == "Testing " putchars dup2 put "with input " putchars put ": " putchars
        assert ;
.

[1] [0] [my_factorial] test.
[1] [1] [my_factorial] test.
[6] [3] [my_factorial] test.

[0] [0] [fibonacci_v3] test.
[1] [1] [fibonacci_v3] test.
[8] [6] [fibonacci_v3] test.

[[]] [[]] [reverse_v3] test.
[[1]] [[1]] [reverse_v3] test.
[[3 2 1]] [[1 2 3]] [reverse_v3] test.

["abc" "abc"] [[[dup]] "abc"] [strcase] test.
["abc"] [[[dup] ["abc"]] "abc"] [strcase] test.
[3 "def"] [[[dup] ["def" 3] ["abc"]] "def"] [strcase] test.

[3] [2 [1 2 3]] [val_at] test.
